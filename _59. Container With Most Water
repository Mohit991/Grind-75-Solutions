# class Solution:
#     def maxArea(self, height: List[int]) -> int:
#         maxWater = 0
#         for i in range(len(height)):
#             for j in range(i+1, len(height)):
#                 length = min(height[i], height[j])
#                 width = j - i
#                 if maxWater < length * width:
#                     maxWater = length*width               
#         return maxWater            

###############################################################
#Solution: Take two pointers. 
# Start one from left and start one from right. 
# Find the min height between the two as min(height[left], height[right]).
# Find width = right - left. Find area. 
# Now either left or right whichever value is minimum, move that pointer. 
# Do left + 1 or right - 1, which is lesser of the two. 
#TC - O(n), SC - O(1)

class Solution:
    def maxArea(self, height: List[int]) -> int:
        left, right = 0, len(height)-1
        maxWater = 0
        while left != right:
            minHeight = min(height[left], height[right])
            width = right - left
            maxWater = max(maxWater, width*minHeight)
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
                
        return maxWater    
