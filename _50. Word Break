# Brute Force Approch:
# Recursion
# TC - O(2^n)
#Call the method with s initially, now apply a loop with the dict and if s starts with any word in dict 
#then remove that part from s and call the method again. If s become '' then you have found the solution.
#if method returns true then return true from here as well. 
#if loop ends return False becuase you did not find the solution. 
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        def traverse(s):
            if s == '':
                return True
            for word in wordDict:
                if s.startswith(word):
                    if traverse(s[len(word):]):
                        return True
            return False    
        return traverse(s) 

#############################################################
#Brute Force Approch:
# Recursion
#You can also try to build the solution from the ''.

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        def traverse(st):
            if st == s:
                return True
            if len(st) > len(s):
                return False
            for word in wordDict:
                if traverse(st + word):
                    return True
            return False    
        return traverse('') 

##############################################################
#DP Approch:
# Recursion with DP
#To introduce DP to this solution. 
# For every string that does not have a solution we will put that in a set. 
#Rememeber that loop ends iff we could not find a solution. Then if we see s in set then return False.
# If we see a string again and we were not able to find a solution for it,
# the  it will be in the set. If that is so we simply return false and we 
# dont process that string further. 

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        previouslySeen = set()
        def dfs(s):
            if s in previouslySeen:
                return False
            if s == '':
                return True
            for word in wordDict:
                if s.startswith(word):
                    if dfs(s[len(word):]):
                        return True   
            previouslySeen.add(s)
            return False
        return dfs(s) 

########################################################################################

#If you want to use the index instead of cutting the string, you can do that as below:
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        def findWord(s, index):            
            if index >= len(s):
                return True
            
            for i in range(len(wordDict)):
                if s[index:].startswith(wordDict[i]):
                    size = len(wordDict[i])
                    if findWord(s, index + size):
                        return True
            return False
        return findWord(s, 0)

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        def findWord(s, index, memo):
            if index in memo:
                return False
            
            if index >= len(s):
                return True
            
            for i in range(len(wordDict)):
                if s[index:].startswith(wordDict[i]):
                    size = len(wordDict[i])
                    if findWord(s, index + size, memo):
                        return True
                    else:
                        memo.add(index)
            return False
        return findWord(s, 0, set())

###############################################################
#DP Approch:
#Tabulation
# TC - len(s) ^ 3

#To use tabulation, create an array of length len(s) + 1, call it stringMemo, 
# put stringMemo[0] = True and rest as False. 
# stringMemo[i] stands for whether substring(0, i) can be segmented into words from the dictionary. 
# So stringMemo[0] means whether substring(0, 0) (which is an empty string) can be segmented, 
# and of course the answer is yes.
#Use two loops i from 1 to last and j from 0 to i-1. Here if stringMemo[j] is true that means substring 0 to j is True
#then we will just check j to i substring. If it is there then put stringMemo[i] = True.
#at last return stringMemo[len[s]] or stringMemo[-1]

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        wordDictSet = set(wordDict) #Creating a set for faster retrival.
        stringMemo = [True] + [False] * (len(s))
        for i in range(1, len(s)+1):
            for j in range(0,i):
                if stringMemo[j]: #So substring 0:j can be constructed from wordDict
                    if s[j:i] in wordDictSet: #if the rest part ie j:i is in wordDict
                        stringMemo[i] = True #Then we can make the whole 0:i. Because 0:i = 0:j + j:i 
        return stringMemo[-1]

###########################################################
#Alternative approch:
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        memo = [False] * (len(s) + 1)
        memo[0] = True
        
        for i in range(len(memo)):
            if memo[i]:
                for word in wordDict:
                    if s[i:].startswith(word):
                        if i + len(word) == len(s):
                            return True
                        memo[i + len(word)] = True
        
        return memo[-1]
