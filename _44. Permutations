class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []
        def backtrack(nums, currPermute):
            if not nums:
                res.append(currPermute)
                return
            for i in range(len(nums)):
                backtrack(nums[:i]+nums[i+1:], currPermute+[nums[i]])
            return
        backtrack(nums, [])
        return res

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []
        currentPathSet = set()
        def backtrack(currPermute):
            if len(currPermute) == len(nums):
                res.append(currPermute)
                return
            for i in range(len(nums)):
                if nums[i] in currentPathSet:
                    continue
                currentPathSet.add(nums[i])    
                backtrack(currPermute+[nums[i]])
                currentPathSet.remove(nums[i])  
            return
        backtrack([])
        return res

