# Given n = 5, and version = 4 is the first bad version.

# call isBadVersion(3) -> false
# call isBadVersion(5) -> true
# call isBadVersion(4) -> true

# Then 4 is the first bad version. 
# First, we initialize left = 1 and right = n to include all possible
# values. Then we notice that we don't even need to design the condition 
# function. It's already given by the isBadVersion API. Finding the first
# bad version is equivalent to finding the minimal k satisfying 
# isBadVersion(k) is True. Our template can fit in very nicely:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 1, n 
        
        while left < right:
            mid = left + (right - left) // 2
            if isBadVersion(mid):
                right = mid
            else:
                left = mid + 1
        return left
