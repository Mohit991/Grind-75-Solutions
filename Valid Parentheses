# Approach
# Here is the step-by-step approach of the algorithm:

# Initialize an empty stack.

# Traverse the input string character by character.

# If the current character is an opening bracket (i.e., '(', '{', '['),
# push it onto the stack.

# If the current character is a closing bracket (i.e., ')', '}', ']'),
# check if the stack is empty. If it is empty, return false, because the
# closing bracket does not have a corresponding opening bracket. Otherwise,
# pop the top element from the stack and check if it matches the current 
# closing bracket. If it does not match, return false, because the brackets
# are not valid.


# After traversing the entire input string, if the stack is empty, return
# true, because all opening brackets have been matched with their 
# corresponding closing brackets. Otherwise, return false, because some
# opening brackets have not been matched with their corresponding closing
# brackets.


class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        
        for bracket in s:
            if bracket in '({[':
                stack.append(bracket)
            elif bracket == ')':
                if not stack or stack[-1] != '(':
                    return False
                stack.pop()
            elif bracket == '}':
                if not stack or stack[-1] != '{':
                    return False
                stack.pop()
            elif bracket == ']':
                if not stack or stack[-1] != '[':
                    return False
                stack.pop()
        return not stack #return true if stack is empty and false if nont
        
