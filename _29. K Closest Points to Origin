# Because we want k nearest points, it is very clear that we must use heap. 
# We create a heap. Take every point from points. Find the distance of this
# point from the origin. Push that to the heap(python only has min heap and we
# need a minheap in this situation as well. 
# If the len of the heap gets more than the len of points - k that means that
# we must have one point in the heap which is in k nearest so we pop from heap. 
# Add that to answer. 
# TC: Pushes or Insertions = n, each insertion = log(n-k), So = nlog(n-k)
# Pops = k, So = klog(n-k), So total = nlog(n-k) + klog(n-k)

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        heap = []
        ans = []
        for point in points:
            x, y = point
            distance = sqrt(x**2 + y**2)
            heappush(heap, (distance, x, y))
            if len(heap) > len(points) - k:
                d, x, y = heappop(heap)
                ans.append([x, y])
        return ans
    
############################################################################

# Or insert all elements in the heap first and then pop k from it. 
# TC = O(nlog)+O(klogn)

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        heap = []
        for point in points:
            x = point[0]
            y = point[1]
            distance = x*x + y*y
            heappush(heap, (distance, [x,y]))
        
        kClosestPoints = []
        for i in range(k):
            kClosestPoints.append(heappop(heap)[1]) 
        return kClosestPoints
